{"version":3,"sources":["components/dashboard.js","context/Wallet.js","utils.js","components/header.js","components/intro.js","connectors.js","App.js","hooks.js","serviceWorker.js","index.js","components/medium-brands.svg"],"names":["Dashboard","useWeb3React","account","useState","Container","Row","style","marginTop","minHeight","zIndex","textAlign","Col","sm","md","size","offset","color","fontFamily","fontWeight","lineHeight","position","bottom","left","href","src","require","width","height","WalletContext","ethers","utils","parseEther","createContext","context","balances","allowances","poolConditions","profits","connect","disconnect","Header","props","wallet","useContext","library","chainId","active","useEffect","getBalance","then","balance","ETHBalance","setValue","Wallet","display","justifyContent","Badge","margin","str","maxDecimalDigits","includes","parts","split","slice","truncateEtherValue","bn","value","commify","formatEther","toString","fontSize","len","length","substring","truncateAddress","Button","onClick","Navbar","backgroundColor","borderBottom","Intro","textTransform","letterSpacing","background","borderImageSource","borderImageSlice","borderStyle","boxSizing","borderRadius","borderImageWidth","injected","InjectedConnector","supportedChainIds","getLibrary","provider","connector","providers","Web3Provider","App","activate","deactivate","activatingConnector","setActivatingConnector","undefined","suppress","error","ethereum","window","on","handleConnect","console","log","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","networkId","removeListener","useInactiveListener","tried","setTried","isAuthorized","catch","useEagerConnect","Provider","backgroundImage","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.f44d8087.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport { useWeb3React } from '@web3-react/core'\n//import { useHegicContract, useWBTCContract, useStakingETHContract, useStakingWBTCContract } from '../contracts/useContract'\nimport { Container, Row, Col } from 'reactstrap'\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Button } from 'reactstrap';\nimport classnames from 'classnames'\n\n/*\nimport YourSharesTab from './tabs/yourSharesTab'\nimport DepositTab from './tabs/depositTab'\nimport StatsTab from './tabs/statsTab'\nimport { PoolContext } from '../context/Pool'\n*/\n\nfunction Dashboard() {\n  const { account } = useWeb3React()\n  /*\n  const HEGIC = useHegicContract();\n  const stakingETH = useStakingETHContract();\n  const stakingWBTC = useStakingWBTCContract();\n  const WBTC = useWBTCContract();\n\n  const [lots, setLots] = useState([]);\n  const [totalBalance, setTotalBalance] = useState(ethers.BigNumber.from('0'))\n  const [lockedBalance, setLockedBalance] = useState(ethers.BigNumber.from('0'))\n\n  const balances = {\n    totalBalance: {value: totalBalance, setValue: setTotalBalance},\n    lockedBalance: {value: lockedBalance, setValue: setLockedBalance}\n  }\n\n  const waitAndUpdate = async (txRequest) => {\n    console.log(txRequest.hash)\n    await txRequest.wait();\n  }\n\n  const mintHegic = async () => {\n    const amountToMint = ethers.BigNumber.from(\"300000000000000000000000\");\n    const txRequest = await HEGIC.mintTo(account, amountToMint);\n    await waitAndUpdate(txRequest)\n  }\n\n  const mintWBTC = async () => {\n    const amountToMint = ethers.BigNumber.from(\"10000000000\");\n    const txRequest = await WBTC.mintTo(account, amountToMint);\n    const txRequest2 = await WBTC.approve(stakingWBTC.address, amountToMint);\n    await waitAndUpdate(txRequest)\n    await waitAndUpdate(txRequest2)\n  }\n  \n  const sendProfit = async () => {\n    const txRequest = await stakingETH.sendProfit({ value: ethers.utils.parseEther(\"0.1\") })\n    await waitAndUpdate(txRequest)\n  }\n\n  const sendProfitWBTC = async () => {\n    const txRequest = await stakingWBTC.sendProfit(ethers.utils.parseUnits(\"0.1\", 8))\n    await waitAndUpdate(txRequest)\n  }\n  */\n  const [activeTab, setActiveTab] = useState('1');\n\n  const toggle = tab => {\n    if (activeTab !== tab) setActiveTab(tab);\n  }\n\n  return (\n    <Container >\n     <Row style={{marginTop:'10vh', minHeight:'50vh', zIndex:'-1', textAlign:'center'}}>\n             <Col sm='12' md={{ size: 6, offset: 3}}>\n                     <div style={{color: '#defefe', fontFamily:'Exo 2', fontWeight:'500', lineHeight:'150%'}}>\n                     <h1>Coming Soon!</h1> \n                     </div>\n             </Col>\n     </Row>\n      <div style={{position:'absolute', bottom: \"1%\", left: \"48.25%\"}}>\n\t <a href=\"https://chuddster.medium.com/claim-hegic-rewards-and-start-yield-farming-in-a-single-transaction-7664b6cfafe8\"> <img src={require('./medium-brands.svg')} width=\"50\" height=\"25\" /> </a>\n      </div>\n    </Container>\n );\n}\n\nexport default Dashboard;\n","import { createContext } from 'react';\n\nconst WalletContext = createContext(\n    {\n        context: {},\n        balances: {},\n        allowances: {},\n        poolConditions: {},\n        profits: {},\n        connect: () => {},\n        disconnect: () => {}\n    });\n\nexport {\n    WalletContext\n};\n","import { ethers } from 'ethers'\n\nconst truncateEtherValue = (str, maxDecimalDigits) => {\n    if (str.includes(\".\")) {\n    const parts = str.split(\".\");\n    return parts[0] + \".\" + parts[1].slice(0, maxDecimalDigits);\n    }\n    return str;\n};\n\nconst formatBN = (bn) => {\n    return ethers.utils.commify(ethers.utils.formatEther(bn.toString()));\n}\n\nconst truncateAddress = (str) => {\n    const len = str.length;\n    return str.substring(0, 8) + '...' + str.substring(len-7, len-1);\n}\n\nconst Asset = {WBTC: 0, ETH: 1}\n\nconst LOT_PRICE = ethers.utils.parseEther('888000');\n\n\nexport {\n    truncateEtherValue,\n    formatBN, \n    truncateAddress,\n    Asset,\n    LOT_PRICE\n}\n","import React, { useState, useEffect, useContext } from 'react'\n// import { useWeb3React } from '@web3-react/core'\n//import { useHegicContract, useStakingPoolContract } from '../contracts/useContract'\nimport { ethers } from 'ethers';\nimport { Badge, Button, Col, Navbar} from 'reactstrap';\nimport { hexZeroPad } from 'ethers/lib/utils';\nimport { truncateAddress, truncateEtherValue, formatBN } from '../utils'\nimport { WalletContext } from '../context/Wallet'\n\nfunction Header(props) {\n    // const { account, library, chainId, active } = useWeb3React();\n    const wallet = useContext(WalletContext);\n    const { account, library, chainId, active } = wallet.context;\n\n    //const HEGIC = useHegicContract();\n    //const stakingPool = useStakingPoolContract();\n\n    useEffect(() => {\n        if(!!account && !!library) {\n            library.getBalance(account).then((balance) => {\n                wallet.balances.ETHBalance.setValue(balance)\n            });\n\t    /*\n            stakingPool.balanceOf(account).then((balance) => {\n                wallet.balances.sHEGICBalance.setValue(balance)\n            });\n\n            HEGIC.balanceOf(account).then((balance) => {\n                wallet.balances.HEGICBalance.setValue(balance)\n            });\n\n            HEGIC.allowance(account, stakingPool.address).then((allowance) => {\n                wallet.allowances.HEGICAllowance.setValue(allowance);\n            });\n\n            stakingPool.ownerPerformanceFee(account).then(async fee => {\n                if(!fee.isZero())\n                    wallet.poolConditions.ownerPerformanceFee.setValue(fee.toNumber()/1000);\n                else\n                    wallet.poolConditions.ownerPerformanceFee.setValue(await stakingPool.performanceFee().then(n => n.toNumber()/1000));\n            });\n\n            const filter_inputs = {\n                address: HEGIC.address,\n                topics: [\n                    ethers.utils.id(\"Transfer(address,address,uint256)\"),\n                    null,\n                    hexZeroPad(account,32)\n                ]\n            }\n\n            const filter_outputs = {\n                address: HEGIC.address,\n                topics: [\n                    ethers.utils.id(\"Transfer(address,address,uint256)\"),\n                    hexZeroPad(account,32)\n                ]\n            }\n            \n            const filter_approve = {\n                address: HEGIC.address,\n                topics: [\n                    ethers.utils.id(\"Approval(address,address,uint256)\"),\n                    hexZeroPad(account,32)\n                ]\n            }\n\n            const filter_profit = {\n                address: HEGIC.address,\n                topics: [\n                    ethers.utils.id(\"ClaimedProfit(address,uint256)\"),\n                    hexZeroPad(account,32)\n                ]\n            }\n\n            library.on(filter_inputs, (log, event) => {\n                HEGIC.balanceOf(account).then((balance) => {\n                    wallet.balances.HEGICBalance.setValue(balance)\n                });\n                stakingPool.balanceOf(account).then((balance) => {\n                    wallet.balances.sHEGICBalance.setValue(balance)\n                });\n            });\n            \n            library.on(filter_profit, (log, event) => {\n                library.getBalance(account).then((balance) => {\n                    wallet.balances.ETHBalance.setValue(balance)\n                });\n                // UPDATE PROFIT\n            });\n            \n            library.on(filter_outputs, (log, event) => {\n                HEGIC.balanceOf(account).then((balance) => {\n                    wallet.balances.HEGICBalance.setValue(balance)\n                });\n                stakingPool.balanceOf(account).then((balance) => {\n                    wallet.balances.sHEGICBalance.setValue(balance)\n                });\n            });\n\n            library.on(filter_approve, (log, event) => {\n                HEGIC.allowance(account, stakingPool.address).then((allowance) => {\n                    wallet.allowances.HEGICAllowance.setValue(allowance);\n                });\n            }); */\n        }\n            \n\n    }, [account, library, chainId])\n\n    const Wallet = () => {\n        return (\n            <>\n                <Col sm='0' md={{size:2, offset:5}} style={{display:'flex', justifyContent:'center'}}>\n                    <h3 style={{color:'#45fff4', zIndex:'99', fontFamily:'Jura', fontWeight:'bold'}}>HEGIC</h3>\n                </Col>\n                <Col sm='12' md={{size:5, offset:0}} style={{display:'flex', justifyContent:'flex-end'}}>\n                { active ? (\n                    <div>\n                        <Badge color=\"secondary\" style={{margin:\"2.5px\"}}>{truncateEtherValue(formatBN(wallet.balances.ETHBalance.value),4)} ETH </Badge>\n                        <span style={{color:'#defefe', fontSize:'12px'}}>{truncateAddress(account)}</span>\n                        <Button color=\"link\" onClick={wallet.disconnect}>Disconnect</Button>\n                    </div>\n                ) : (\n                    <Button color=\"link\" onClick={wallet.connect}>Connect</Button>\n                )}\n                </Col>\n            </>\n        )\n    }\n    \n    return (\n            <Navbar style={{display:'flex', backgroundColor:'#19274d', borderBottom: '1px solid #45fff4'}}>\n                <Wallet />\n            </Navbar>\n    );\n}\n\nexport default Header;\n","import React, { useContext } from 'react';\nimport { Row, Container, Col, Button } from 'reactstrap';\nimport { WalletContext } from '../context/Wallet';\n\nfunction Intro(props) {\n    const connect = useContext(WalletContext).connect\n    return (\n    <Container>\n        <Row style={{marginTop:'10vh', minHeight:'50vh', zIndex:'-1', textAlign:'center'}}>\n            <Col sm='12' md={{ size: 6, offset: 3}}>\n                    <h1 style={{\n                        color:'#45fff4',\n                        fontFamily:'Jura',\n                        fontWeight:'bold',\n                        lineHeight:'125%',\n                        fontSize:'46px',\n                        textTransform:'uppercase'\n                        }}>Use Hegic Rewards to Yield Farm</h1>\n                    <div style={{color: '#defefe', fontFamily:'Exo 2', fontWeight:'500', lineHeight:'150%'}}>\n                    Service for converting swapped Hegic (from rHegicv1) directly into writeETH, writeBTC, and/or yvHEGIC. All in a single tx.   \n      \t\t    </div>\n                    <div style={{marginTop:'25px', display:'flex', justifyContent:'center'}}>\n                    <Button style={{\n                        color:'#15203d',\n                        fontWeight:'bold',\n                        fontFamily:'Jura',\n                        letterSpacing:'.1em',\n                        background:'transparent',\n                        borderImageSource:'url(https://www.hegic.co/assets/img/button-primary.svg)', \n                        borderImageSlice:'20',\n                        borderStyle:'solid',\n                        boxSizing:'border-box',\n                        borderRadius:'2px',\n                        borderImageWidth:'50px'}} \n                        onClick={connect}>CONNECT WALLET</Button>\n                    </div>\n\t    </Col>\n      \t</Row>\n\t  <div style={{position:'absolute', bottom: \"1%\", left: \"48.25%\"}}>\n\t     <a href=\"https://chuddster.medium.com/claim-hegic-rewards-and-start-yield-farming-in-a-single-transaction-7664b6cfafe8\"> <img src={require('./medium-brands.svg')} width=\"50\" height=\"25\" /> </a>\n\t  </div>\n    </Container>);\n}\n\nexport default Intro;\n","import { InjectedConnector } from '@web3-react/injected-connector'\nexport const injected = new InjectedConnector({ supportedChainIds: [1, 3, 4, 5, 42] })\n","import React, { useContext, useState, useEffect } from 'react';\nimport Dashboard from './components/dashboard';\nimport Header from './components/header'\nimport Intro from './components/intro'\nimport { useWeb3React, Web3ReactProvider } from '@web3-react/core'\nimport { ethers } from 'ethers';\nimport { useEagerConnect, useInactiveListener } from './hooks'\nimport { injected } from './connectors';\nimport { WalletContext } from './context/Wallet';\n//import { useHegicContract, usePooledStakingETHContract } from './contracts/useContract'\nfunction getLibrary(provider, connector) {\n  return new ethers.providers.Web3Provider(provider)\n}\n\nfunction App() {\n  const [ETHBalance, setETHBalance] = useState(0);//ethers.BigNumber.from('0'));\n  //const [HEGICBalance, setHEGICBalance] = useState(ethers.BigNumber.from('0'));\n  //const [sHEGICBalance, setSHEGICBalance] = useState(ethers.BigNumber.from('0'));\n  //const [HEGICAllowance, setHEGICAllowance] = useState(ethers.BigNumber.from('0'));\n  //const [ownerPerformanceFee, setOwnerPerformanceFee] = useState(0);\n  //const [ownerCanWithdraw, setOwnerCanWithdraw] = useState(false);\n  //const [profitETH, setProfitETH] = useState(ethers.BigNumber.from('0'));\n  //const [profitWBTC, setProfitWBTC] = useState(ethers.BigNumber.from('0'));\n\n  const balances = {\n    ETHBalance: {value: ETHBalance, setValue: setETHBalance},\n    //HEGICBalance: {value: HEGICBalance, setValue: setHEGICBalance},\n    //sHEGICBalance: {value: sHEGICBalance, setValue: setSHEGICBalance}\n  }\n\n  const allowances = {\n    //HEGICAllowance: {value: HEGICAllowance, setValue: setHEGICAllowance}\n  }\n\n  const poolConditions = {\n    //ownerPerformanceFee: { value: ownerPerformanceFee, setValue: setOwnerPerformanceFee },\n    //canWithdraw: { value: ownerCanWithdraw, setValue: setOwnerCanWithdraw }\n  }\n\n  const profits = {\n    //profitETH: { value: profitETH, setValue: setProfitETH },\n    //profitWBTC: { value: profitWBTC, setValue: setProfitWBTC }\n  }\n\n  const context = useWeb3React()\n  const { connector, active, activate, deactivate, account, library, chainId } = context\n  \n  // handle logic to recognize the connector currently being activated\n  const [activatingConnector, setActivatingConnector] = useState()\n  useEffect(() => {\n  if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined)\n  }\n  }, [activatingConnector, connector])\n  \n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n  \n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  useInactiveListener(!triedEager || !!activatingConnector)\n  \n  function connect() {\n      setActivatingConnector(injected)\n      activate(injected)\n  }\n  \n  function disconnect() {\n  deactivate(injected)\n  }\n\n  return (\n  <WalletContext.Provider value={{context, connect, disconnect, balances, allowances, poolConditions, profits}}>\n    <div style={{ background:'radial-gradient(68.28% 53.52% at 50% 50%, #1c2a4f 0%, #111b35 100%)'}}>\n        <div style={{backgroundImage:'url(https://www.hegic.co/assets/img/background-image.svg)', height:'100vh'}}>\n            <Header />\n            { active ? (\n              <Dashboard />\n            ) : (\n              <Intro />\n            )}\n    \t</div>\n    </div>\n  </WalletContext.Provider>\n  );\n}\n\n\nexport default () => (\n  <Web3ReactProvider getLibrary={getLibrary}>\n    <App />\n  </Web3ReactProvider>\n)\n","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { injected } from './connectors'\n\nexport function useEagerConnect() {\n    const { activate, active } = useWeb3React()\n  \n    const [tried, setTried] = useState(false)\n  \n    useEffect(() => {\n      injected.isAuthorized().then((isAuthorized) => {\n        if (isAuthorized) {\n          activate(injected, undefined, true).catch(() => {\n            setTried(true)\n          })\n        } else {\n          setTried(true)\n        }\n      })\n    }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\n  \n    // if the connection worked, wait until we get confirmation of that to flip the flag\n    useEffect(() => {\n      if (!tried && active) {\n        setTried(true)\n      }\n    }, [tried, active])\n  \n    return tried\n  }\n  \n  export function useInactiveListener(suppress = false) {\n    const { active, error, activate } = useWeb3React()\n  \n    useEffect(() => {\n      const { ethereum } = window\n      if (ethereum && ethereum.on && !active && !error && !suppress) {\n        const handleConnect = () => {\n          console.log(\"Handling 'connect' event\")\n          activate(injected)\n        }\n        const handleChainChanged = (chainId) => {\n          console.log(\"Handling 'chainChanged' event with payload\", chainId)\n          activate(injected)\n        }\n        const handleAccountsChanged = (accounts) => {\n          console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n          if (accounts.length > 0) {\n            activate(injected)\n          }\n        }\n        const handleNetworkChanged = (networkId) => {\n          console.log(\"Handling 'networkChanged' event with payload\", networkId)\n          activate(injected)\n        }\n  \n        ethereum.on('connect', handleConnect)\n        ethereum.on('chainChanged', handleChainChanged)\n        ethereum.on('accountsChanged', handleAccountsChanged)\n        ethereum.on('networkChanged', handleNetworkChanged)\n  \n        return () => {\n          if (ethereum.removeListener) {\n            ethereum.removeListener('connect', handleConnect)\n            ethereum.removeListener('chainChanged', handleChainChanged)\n            ethereum.removeListener('accountsChanged', handleAccountsChanged)\n            ethereum.removeListener('networkChanged', handleNetworkChanged)\n          }\n        }\n      }\n    }, [active, error, suppress, activate])\n  }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './scss/custom.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/medium-brands.562753a3.svg\";"],"sourceRoot":""}